import time
import Config
import Client
import Utils
import pickle
import random
import os


"""
User process in HDFS cluster.
Users interact with HDFS by sending messages to HDFS Client.
Those methods are implemented in this file and createFile, openFile, readFile, writeFile, closeFile, deleteFile API's are implemented.
"""
class User(process):

    def setup(pickleFile):
        """
        setup needs pid object of namenode. It is supplied as pickle file
        """
        self.pickleFile = pickleFile
        self.msgId = 0
        self.tokenString = 'token'
        self.clients = None
        self.nameNodes = None
        self.filemode = -1

    def delay():
        for _ in range(50000000):
            pass
        time.sleep(10)


    def getToken():
        """
        Generates a unique token everytime it is called
        :return:
        """
        token = tokenString + str(msgId)
        msgId += 1
        return token


    def createFile(filename):
        """
        CreateFile API
        Create a file named `filename` in HDFS
        :return: True/False
        """
        token = getToken()
        send(('createFile', token, filename), to=clients)
        await(some(received(('createFile', _token, _filename, _))))
        result = setof(r, received(('createFile', _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def openFile(filename, mode):
        """
        OpenFile API
        Opens `filename` in specified mode ('r' or 'w')
        :return: True/False representing if open operation was successful
        """
        if mode == 'r':
            filemode = Config.R_LEASE
        elif mode == 'w':
            filemode = Config.W_LEASE
        token = getToken()
        send(('openFile', filemode, token, filename), to=clients)
        await(some(received(('openFile', _filemode, _token, _filename, _))))
        result = setof(r, received(('openFile', _filemode, _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def readFile(filename, nbytes):
        """
        ReadFile API
        Reads `nbytes` bytes from `filename`
        :return: (Result, data) Result: True/False representing if operation was successful,
        data is the actual data read from the file
        """
        token = getToken()
        send(('readFile', token, filename, 0, nbytes), to=clients)
        await(some(received(('readFile', _token, _filename, 0, nbytes, _))))
        result = setof(r, received(('readFile', _token, _filename, 0, nbytes, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def writeFile(filename, buf):
        """
        WriteFile API
        Appends `buf` to `filename`
        :return: True/False representing if the operation was successful
        """
        token = getToken()
        send(('appendFile', token, filename, buf),to=clients)
        await(some(received(('appendFile', _token, _filename, _))))
        result = setof(r, received(('appendFile', _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def closeFile(filename):
        """
        CloseFile API
        Calls close on an opened file
        :return: True/False representing if the operation was successful
        """
        token = getToken()
        send(('closeFile', filemode, token, filename), to=clients)
        await(some(received(('closeFile', _filemode, _token, _filename, _))))
        # Reset filemode. We are saving the filemode during open call to keep track of the mode
        # with which the file was opened
        filemode = -1
        result = setof(r, received(('closeFile', _filemode, _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def deleteFile(filename):
        """
        DeleteFile API
        Deletes `filename` from HDFS
        :return: True/False representing if the operation was successful
        """
        token = getToken()
        send(('deleteFile', token, filename), to=clients)
        await(some(received(('deleteFile', _token, _filename))))


    def listFiles():
        """
        ListFiles API
        Returns a tuple of files present in HDFS
        """
        token = getToken()
        send(('listFiles', token), to=clients)
        await(some(received(('listFiles', _token, _))))
        filesList = setof(r, received(('listFiles', _token, r)))
        returnValue = Utils.getOneFromSet(filesList)
        return returnValue


    def run():
        with open(pickleFile, "rb") as fid:
            nameNodes = pickle.load(fid)

        # Start HDFS client for the user
        clients = new(Client.Client, num=1, at=Config.CLIENT_LOCATION)
        for client in clients:
            setup(client, args=(nameNodes,))
        start(clients)

        output("User started: ", self)
        output('create file f1')
        createFile('f1')

        output('call listfiles')
        files = listFiles()
        output('listFiles output: ', files)

        output('call openFile(\'f1\', \'w\')')
        openFile('f1','w')
        string = b'Hello HDFS. A tool to store data in equal sized blocks in a distributed manner :).'
        output("writing to f1: ",string)
        writeFile('f1', string)
        output('write to f1 complete')

        output('call closeFile(\'f1\')')
        closeFile('f1')

        output('call openFile(\'f1\', \'r\')')
        openFile('f1', 'r')


        output('call readFile(\'f1\', 100)')
        read_data = readFile('f1', 100)
        output('read result: ', read_data)

        output('call closeFile(\'f1\')')
        closeFile('f1')

        output('call opnFile(\'f1\', \'w\')')
        openFile('f1', 'w')


        string2 = b'second append operation to file'
        output("writing to f1: ", string2)
        writeFile('f1', string2)
        closeFile('f1')

        output('call openFile(\'f1\', \'r\')')
        openFile('f1', 'r')
        read_data = readFile('f1', 150)
        output('read result after 2nd append: ', read_data)

        output('call closeFile(\'f1\')')
        closeFile('f1')

