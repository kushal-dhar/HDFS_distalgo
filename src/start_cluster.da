NameNode = import_da('NameNode')
DataNode = import_da('DataNode')
Client = import_da('Client')
User = import_da('User')

import Config
import os
import pickle
import time
import datetime
import matplotlib.pyplot as plt



def main():

    # Start namenodes
    namenodes = new(NameNode.NameNode, num=1, at=Config.NAMENODE_LOCATION)
    for namenode in namenodes:
        setup(namenode, args=())
    start(namenodes)

    output('namenode started')

    with open("namenode.pickle", 'wb') as fid:
        pickle.dump(namenodes, fid)


    # Start datanodes
    datanodes = new(DataNode.DataNode, num=3, at=Config.DATANODE_LOCATION)
    output("project data path= ", Config.PROJECT_DATA_PATH)
    count = 1
    for datanode in datanodes:
        storageDir = os.path.join(Config.PROJECT_DATA_PATH, str(count))
        if not os.path.isdir(storageDir):
            os.makedirs(storageDir)
        setup(datanode, args=(namenodes, storageDir))
        count += 1
    start(datanodes)



    # Start users
    users = new(User.User, num=1, at=Config.USER_LOCATION)
    for user in users:
        setup(user, args=("namenode.pickle", 0, True, self))
    start(users)


    time_taken = [[], []]
    numReaders = [1,10,15,25]
    counter = 1
    for iteration in range(2):
        # In first iteration, all 3 datanodes are available
        for nReaders in numReaders:
            start_time = datetime.datetime.now().timestamp()
            users = new(User.User, num=nReaders, at=Config.USER_LOCATION)
            messageDict = {}
            for user in users:
                messageDict[user] = counter
                setup(user, args=("namenode.pickle", counter, False, self))
                counter += 1
            start(users)
            for user in messageDict:
                await(some(received(('done', messageDict[user]))))
            #await(some(received(('done',_writes))))
            end_time = datetime.datetime.now().timestamp()
            time_taken[iteration].append(end_time-start_time)
            output(time_taken[iteration])

        # terminate 2 datanodes
        if iteration == 0:
            time.sleep(10)
            output("sending terminate msg to datanode0")
            datanodeList = list(datanodes)
            send(('kill'), to=datanodeList[0])

            time.sleep(60)
            output("sending terminate msg to datanode1")
            send(('kill'), to=datanodeList[1])

            time.sleep(60)



    output("time taken: ", time_taken)
    plt.scatter(numReaders, time_taken[0])
    plt.plot(numReaders, time_taken[0], label='No datanode failures')
    plt.scatter(numReaders, time_taken[1])
    plt.plot(numReaders, time_taken[1], label='Two out of three datanodes fail, one datanode active')
    plt.title("Read performance comparison with and without datanode failures")
    plt.xlabel("Number of Readers")
    plt.ylabel("Time(in seconds)")
    plt.legend()
    plt.show()
