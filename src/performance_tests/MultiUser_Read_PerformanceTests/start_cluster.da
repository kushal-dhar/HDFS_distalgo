NameNode = import_da('NameNode')
DataNode = import_da('DataNode')
Client = import_da('Client')
User = import_da('User')
# User2 = import_da('User2')
Client2 = import_da('Client2')

import Config
import os
import pickle
import time
import datetime
import matplotlib.pyplot as plt


def main():
    # Start namenodes
    namenodes = new(NameNode.NameNode, num=1, at=Config.NAMENODE_LOCATION)
    for namenode in namenodes:
        setup(namenode, args=())
    start(namenodes)

    output('namenode started')

    with open("namenode.pickle", 'wb') as fid:
        pickle.dump(namenodes, fid)

    # Start datanodes
    datanodes = new(DataNode.DataNode, num=4, at=Config.DATANODE_LOCATION)
    output("project data path= ", Config.PROJECT_DATA_PATH)
    count = 1
    for datanode in datanodes:
        storageDir = os.path.join(Config.PROJECT_DATA_PATH, str(count))
        if not os.path.isdir(storageDir):
            os.makedirs(storageDir)
        setup(datanode, args=(namenodes, storageDir))
        count += 1
    start(datanodes)

    # Start users
    users = new(User.User, num=1, at=Config.USER_LOCATION)
    for user in users:
        setup(user, args=("namenode.pickle", 0, True, self))
    start(users)

    time_taken = []
    numUsers = [1, 10, 20, 30, 40, 50, 60]
    msgNumber = 0
    msgWaitDict = dict()
    for nUsers in numUsers:
        start_time = datetime.datetime.now().timestamp()
        users = new(User.User, num=nUsers, at=Config.USER_LOCATION)
        for user in users:
            setup(user, args=("namenode.pickle", msgNumber, False, self))
            msgWaitDict[user] = msgNumber
            msgNumber += 1
        start(users)

        for user in users:
            x = msgWaitDict[user]
            await( some( received(('done', msgWaitDict[user])) ) )

        end_time = datetime.datetime.now().timestamp()
        time_taken.append(end_time - start_time)
        output("received done from all users for %d nUsers: " % (nUsers))
    output("\ntime_taken: ", time_taken)
    plt.scatter(numUsers, time_taken)
    plt.plot(numUsers, time_taken, label = "Filesize: 2KB")
    plt.legend()
    plt.title("Multiple User Read Time")
    plt.xlabel("Number of users")
    plt.ylabel("Time(in seconds)")
    plt.show()

    await(received(('kill')))