import time
import Config
import Client
import Utils
import pickle
import random
import os


"""
User process in HDFS cluster.
Users interact with HDFS by sending messages to HDFS Client
"""
class User(process):

    def setup(pickleFile, counter, doWrite, startcluster):
        self.pickleFile = pickleFile
        self.msgId = 0
        self.tokenString = 'token'
        self.clients = None
        self.nameNodes = None
        self.filemode = -1

    def delay():
        for _ in range(50000000):
            pass
        time.sleep(10)


    def getToken():
        token = tokenString + str(msgId)
        msgId += 1
        return token


    def createFile(filename):
        token = getToken()
        send(('createFile', token, filename), to=clients)
        await(some(received(('createFile', _token, _filename, _))))
        result = setof(r, received(('createFile', _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def openFile(filename, mode):
        if mode == 'r':
            filemode = Config.R_LEASE
        elif mode == 'w':
            filemode = Config.W_LEASE
        token = getToken()
        send(('openFile', filemode, token, filename), to=clients)
        await(some(received(('openFile', _filemode, _token, _filename, _))))
        result = setof(r, received(('openFile', _filemode, _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def readFile(filename, nbytes):
        token = getToken()
        send(('readFile', token, filename, 0, nbytes), to=clients)
        await(some(received(('readFile', _token, _filename, 0, nbytes, _))))
        result = setof(r, received(('readFile', _token, _filename, 0, nbytes, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def writeFile(filename, buf):
        token = getToken()
        send(('appendFile', token, filename, buf),to=clients)
        await(some(received(('appendFile', _token, _filename, _))))
        result = setof(r, received(('appendFile', _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def closeFile(filename):
        token = getToken()
        send(('closeFile', filemode, token, filename), to=clients)
        await(some(received(('closeFile', _filemode, _token, _filename, _))))
        # Reset filemode. We are saving the filemode during open call to keep track of the mode
        # with which the file was opened
        filemode = -1
        result = setof(r, received(('closeFile', _filemode, _token, _filename, r)))
        final_res = Utils.getOneFromSet(result)
        return final_res


    def deleteFile(filename):
        token = getToken()
        send(('deleteFile', token, filename), to=clients)
        await(some(received(('deleteFile', _token, _filename))))


    def listFiles():
        token = getToken()
        send(('listFiles', token), to=clients)
        await(some(received(('listFiles', _token, _))))


    def run():
        with open(pickleFile, "rb") as fid:
            nameNodes = pickle.load(fid)
        # Start clients
        clients = new(Client.Client, num=1, at=Config.CLIENT_LOCATION)
        for client in clients:
            setup(client, args=(nameNodes,))
        start(clients)

        output("User started: ", counter)
        if doWrite:
            createFile('file1')
            openFile('file1', 'w')
            filepath = os.getcwd()
            filepath += '/dummyFile.txt'
            file = open(filepath, "rb")
            string = file.read()
            for i in range(counter):
                writeFile('file1', string)
            closeFile('file1')


        else:
            fileName = "f" + str(counter)
            createFile(fileName)
            openFile(fileName, 'w')
            filepath = os.getcwd()
            filepath += '/dummyFile.txt'
            file = open(filepath, "rb")
            string = file.read()
            for i in range(counter):
                writeFile(fileName, string)
            closeFile(fileName)

        # if counter == 5:
        #     time.sleep(5)
        #     deleteFile('f1')
        send(('done',counter, doWrite), to=startcluster)


    def receive(msg=('createFile', filename, result)):
        output('user: received createFile result: ', filename, ' = ', result)


    def receive(msg=('createFile', filename)):
        output("user: createFile msg handler for filename=%s" %(filename))
        send(('createFile', filename), to=clients)

    def receive(msg=('listFiles', files)):
        output('user: received listFiles result: ', files)

    def receive(msg=('listFiles')):
        output("user: listFiles msg handler")
        send(('listFiles'), to=clients)