NameNode = import_da('NameNode')
DataNode = import_da('DataNode')
Client = import_da('Client')
User = import_da('User')
#User2 = import_da('User2')
Client2 = import_da('Client2')

import Config
import os
import pickle
import time
import datetime
import matplotlib.pyplot as plt



def main():

    # Start namenodes
    namenodes = new(NameNode.NameNode, num=1, at=Config.NAMENODE_LOCATION)
    for namenode in namenodes:
        setup(namenode, args=())
    start(namenodes)

    output('namenode started')

    with open("namenode.pickle", 'wb') as fid:
        pickle.dump(namenodes, fid)


    # Start datanodes
    datanodes = new(DataNode.DataNode, num=4, at=Config.DATANODE_LOCATION)
    output("project data path= ", Config.PROJECT_DATA_PATH)
    count = 1
    for datanode in datanodes:
        storageDir = os.path.join(Config.PROJECT_DATA_PATH, str(count))
        if not os.path.isdir(storageDir):
            os.makedirs(storageDir)
        setup(datanode, args=(namenodes, storageDir))
        count += 1
    start(datanodes)


    # Datanode failure check
    """
    time.sleep(10)
    output("sending terminate msg to datanode0")
    datanodeList = list(datanodes)
    send(('kill'), to=datanodeList[0])

    time.sleep(60)
    output("sending terminate msg to datanode1")
    send(('kill'), to=datanodeList[1])

    time.sleep(60)
    """
    """
    datanodes = new(DataNode.DataNode, num=3, at=Config.DATANODE_LOCATION)

    count = 1
    for datanode in datanodes:
        storageDir = os.path.join(Config.PROJECT_DATA_PATH, str(count))
        if not os.path.isdir(storageDir):
            os.makedirs(storageDir)
        setup(datanode, args=(namenodes, storageDir))
        count += 1
    start(datanodes)
    
    while True:
        if await(some(received(('start_datanodes', _, _)))):
            #startDatanodes(namenodes, 3)
            output('message received')
    """

    """
    # Start clients
    clients = new(Client2.Client, num=1, at=Config.CLIENT_LOCATION)
    for client in clients:
        setup(client, args=(namenodes,))
    start(clients)

    # Start users
    users = new(User2.User, num=1, at=Config.USER_LOCATION)
    #client_list = list(clients)
    for user in users:
        setup(user, args=("namenode.pickle",))
    start(users)


    # Start clients
    clients = new(Client.Client, num=1, at=Config.CLIENT_LOCATION)
    for client in clients:
        setup(client, args=(namenodes,))
    start(clients)
    """

    # Start users
    reads = [10, 100, 250, 500, 750]
    newReads = []
    for read in reads:
        newReads.append(12 * read)
    for i in [1,2,3,4]:
        users = new(User.User, num=1, at=Config.USER_LOCATION)
        for user in users:
            setup(user, args=("namenode.pickle", 0, i, True, self))
        start(users)

        time_taken = []
        for iteration in reads:
            start_time = datetime.datetime.now().timestamp()
            users = new(User.User, num=1, at=Config.USER_LOCATION)
            for user in users:
                setup(user, args=("namenode.pickle", iteration, i, False, self))
            start(users)
            await(some(received(('done',_iteration, _i))))
            end_time = datetime.datetime.now().timestamp()
            time_taken.append(end_time-start_time)
            output("received done from user for %d iteration: "%(iteration))

        output("\ntime_taken: ",time_taken)
        plt.scatter(newReads, time_taken)
        title = "Chunk size: " + str(i) + " KB"
        plt.plot(newReads, time_taken,label=title)
        plt.legend()
        plt.title("Single User Read Time")
        plt.xlabel("Read sizes(in KB)")
        plt.ylabel("Time(in seconds)")
    plt.show()

    """
    users = new(User2.User, num=1, at=Config.USER_LOCATION)
    for user in users:
        setup(user, args=("namenode.pickle",counter, True))
        counter += 1
    start(users)
    """

    """
    users2 = new(User2.User, num=1, at=Config.USER_LOCATION)
    for user in users2:
        setup(user, args=(client_list[1],))
    start(users2)

    with open("user.pickle", 'wb') as fid:
        pickle.dump(users, fid)
    """


    #time.sleep(15)
    #output("sending terminate msg to datanode0")
    #datanodeList = list(datanodes)
    #send(('kill'), to=datanodeList[0])

    #time.sleep(20)
    #output("sending terminate msg to datanode1")
    #send(('kill'), to=datanodeList[1])

    # TODO: Garbage code below. clean it
    await(some(received(('start_datanodes', _, _))))

    output('received message to kill existing datandoes')
    send(('kill'), to=datanodes)

    datanodes = new(DataNode.DataNode, num=3, at=Config.DATANODE_LOCATION)
    count = 1
    for datanode in datanodes:
        storageDir = os.path.join(Config.PROJECT_DATA_PATH, str(count))
        if not os.path.isdir(storageDir):
            os.makedirs(storageDir)
        setup(datanode, args=(namenodes, storageDir))
        count += 1
    start(datanodes)

    await(received(('kill')))
