"""
Datanode process in HDFS cluster
"""

#NameNode = import_da('NameNode')

import Config
import os
import time
from threading import Thread

'''
# send() did not work in Thread. Had to create process for it to work
class DataNodeHeartbeat(Thread):
    def __init__(self, datanode, namenode, interval=Config.DATANODE_HEARTBEAT_INTERVAL):
        Thread.__init__(self)
        self.datanode = datanode
        self.namenode = namenode
        self.interval = interval

    def run(self):
        while True:
            # output('sending heartbeat', self)
            send(('heartbeat', self.datanode), to=self.namenode)
            time.sleep(self.interval)
'''

class DataNodeHeartbeat(process):
    """
    During normal operation DataNodes send heartbeats to the NameNode  to  confirm  that  the  DataNode  is  operating  and  the
    block  replicas  it  hosts  are  available
    """

    def setup(datanode, namenode, interval=Config.DATANODE_HEARTBEAT_INTERVAL):
        """
        setup requires pid of datanode for which this process is sending heartbeat
        setup also requires pid of namenode where heartbeat is to be sent
        interval: time difference between 2 heartbeat messages
        """
        pass

    def run():
        output('start heartbeat process for datanode: ', datanode)
        while True:
            #output('sending heartbeat', self)
            send(('heartbeat_datanode', datanode), to=namenode)
            #output("DataNodeHeartbeat: sending heartbeat")
            #time.sleep(interval)
            if await(received(('kill_hbprocess'))):
                exit(0)
            elif timeout(interval):
                pass



    def receive(msg=('kill_hbprocess')):
        """
        Handle terminate message
        """
        output('datanodeHeartbeatProcess: received kill')
        exit(0)

    def receive(msg=('hello', sender)):
        output("datanode heartbeat: received hello from ", sender)

class DataNode(process):
#class DataNode():

    def setup(namenodes, storageDir):
        # Declare all class variables with self. here to reference them without self throughout
        # Used by namenode to uniquely identify datanodes
        self.datanodeId = None
        self.heartbeatThread = None
        self.heartbeatProcess = None
    

    def run():
        """
        During  startup  each  DataNode  connects  to  the  NameNode and performs a
        handshake
        """
        output('datanode started: ', self)
        output('supplied namenode: ', namenodes)

        datanodeId = readDatanodeId()

        send(('add_datanode', self, datanodeId), to=namenodes)
        await(some(received(('datanode_added',_))))
        output('registered successfully with namenode')

        self.heartbeatProcess = new(DataNodeHeartbeat, num=1, at=Config.DATANODE_LOCATION)

        for hbp in self.heartbeatProcess:
            setup(hbp, args=(self, namenodes))
        start(self.heartbeatProcess)


        await(received(('kill_datanode')))
        output('received kill message')
        exit(0)

        
    def connectToNamenode(namenode):
        """
        Performs handshake and verification with namenode.
        After this passes, this datanode is available for storing data blocks.
        Performed in run()
        """
        pass
    
    def getNamespaceId():
        """
        Returns the namespace id for which this datanode is storing data.
        In current implementation, there is only one namespace.
        If multiple namespaces need to be supported, ask namenode to provide namespaceId during first handshake
        """
        pass
    
    def setNamespaceId(id):
        """
        Sets the namespace id for which this datanode is storing data.
        This id is stored persistently on datanode.
        In current implementation, there is only one namespace.
        """
        pass

    def getStorageId():
        """
        Returns the storage id for which this datanode is storing data
        """
        return self.datanodeId
        
    def setStorageId(id):
        """
        Sets the storage id for which this datanode is storing data.
        This id is stored persistently on datanode.
        """
        pass
        
    def sendBlockReport():
        """
        Sends block report to namenode.
        Block reports are sent periodically to namenode.
        Block reports contain list of blocks of files this datanode is storing.
        To be implemented when namenode failures are supported.
        """
        pass
        
    def sendHeartBeat():
        """
        Sends heartbeat to namenode to signal that this datanode is alive
        Implemented in Heartbeat process
        """
        pass
 

    def readDatanodeId():
        """
        The  storage  ID  is  assigned to  the
        DataNode  when  it  registers  with  the  NameNode  for  the  first 
        time and never changes after that.
        This method searches for storage Id file on disk.
        If found, it reads storage id from the file.
        """
        filepath = os.path.join(storageDir, Config.DATANODE_ID_FILE)
        if not os.path.isfile(filepath):
            return None
        fid = open(filepath, 'r')
        data = fid.readline()
        datanodeId = int(data)
        fid.close()
        return datanodeId

    def writeDatanodeId():
        """
        The  storage  ID  is  assigned to  the
        DataNode  when  it  registers  with  the  NameNode  for  the  first
        time and never changes after that.
        This method writes storageId persistently to disk.
        """
        filepath = os.path.join(storageDir, Config.DATANODE_ID_FILE)
        fid = open(filepath, 'w')
        # Possible issue: str(None)
        pid = str(self)
        output(pid, ' -> ', datanodeId)
        fid.write(str(datanodeId) + '\n' + pid)
        fid.close()
    
    
    def receive(msg=('datanode_added', proposedId)):
        """
        Namanode sends this message when datanode handshake is complete.
        If namenode assigns a storage Id to this datanode, this datanode
        writes the storage id persistenyly to disk
        """
        if proposedId != datanodeId:
            datanodeId = proposedId
            writeDatanodeId()



    def sendHeartbeat():
        """
        send heartbeat message to namenode
        This functionalty is really implemented in DatannodeHeartbeatProcess
        """
        send(('heartbeat', self), to=namenodes)



    def receive(msg=('readFile_c2d', client, filename, nbytes, messageId)):
        """
        Handles client's read request.
        Read the block from disk and replies with the contents of the file
        """
        output('datanode: received readFile filename={0}, nbytes={1}'.format(filename, nbytes))

        # Convert relative filename to absolute path on disk
        filepath = os.path.join(self.storageDir, filename)
        fid = open(filepath, 'rb')
        data = fid.read(nbytes)

        output('datanode: output of readFile filename={0}, nbytes={1}: data={2}'.format(filename, nbytes, data))
        send(('readFile_d2c', filename, nbytes, messageId, data), to=client)


    def receive(msg=('appendFile_c2d', filename, blockName, blockNumber, data, datanodes_to_write, messageIdTuple, idx, client), from_=sender):
        """
        The client then pipelines data to the chosen DataNodes, which eventually confirm the creation of
        the block replicas to the NameNode.
        This method implementes the pipelined write mechanism described in paper.
        """
        filepath = os.path.join(self.storageDir, blockName)
        output('received appendFile for filename={0}, filepath={1}'.format(filename, filepath))

        fid = open(filepath, 'ab')
        fid.write(data)
        fid.close()
        #If there are no more datanodes to pipeline to
        if idx == len(datanodes_to_write) - 1:
            pass
        else:
            # Pipeline fashion
            send(('appendFile_c2d', filename, blockName, blockNumber, data, datanodes_to_write, messageIdTuple, idx+1, client), to=datanodes_to_write[idx+1])

        bytesWritten = len(data)
        # Notify namenode
        send(('appendFile_d2n', filename, blockNumber, bytesWritten, self.datanodeId), to=namenodes)
        # Notify client
        send(('appendFile_d2c', messageIdTuple[idx]), to=client)



    def receive(msg=('replicateBlock_n2d', filename, blockNumber, blockFileName, destination_datanode)):
        """
        If  the  number  of  existing  replicas  is  one,  HDFS Namenode
        places the next replica on a different datanode
        This function is called when a datanode receives a message from namenode asking it to replicate the specified
        block to another datanode. This is called when replication factor of a block needs to be increased.
        In this function, the datanode reads the specified block and sends the data to destination datanode for replication
        """
        output("datanode: receive replicate: block={0}, file={1}, to={2}".format(blockNumber, filename, destination_datanode))
        blockFileNameToRead = os.path.join(self.storageDir, blockFileName)
        fid = open(blockFileNameToRead, 'rb')
        data = fid.read()
        fid.close()
        # replicate it on another datanode
        send(('replicateBlock_d2d', filename, blockNumber, blockFileName, data), to=destination_datanode)


    def receive(msg=('replicateBlock_d2d', filename, blockNumber, blockFileName, data)):
        """
        A datanode replicates the block on another datanode to ensure the repliction factor is 2.This would be useful
        when a datanode goes down.
        This function is called when a datanode receives a replicateBlock message from another datanode with filename and data
        The recipient datanode writes the provided data to the provided file.
        Then notifies the namenode that this datanode now successfully hosts specified block
        and namenode can send read requsts for this block in future.
        """
        storing_filename = os.path.join(self.storageDir, blockFileName)
        output("datanode: replicateBlock_d2d: block={0}, file={1}, at={2}".format(blockNumber, filename, storing_filename))
        fid = open(storing_filename, 'wb')
        fid.write(data)
        fid.close()
        bytesWritten = len(data)

        send(('appendFile_d2n', filename, blockNumber, bytesWritten, self.datanodeId), to=namenodes)


    def receive(msg=('deleteBlock', blockname)):
        """
        Deletes block of file from disk
        """
        filepath = os.path.join(self.storageDir, blockname)
        output('received deleteblock for block: %s from NameNode' %(blockname))
        if os.path.exists(filepath):
            os.remove(filepath)
        else:
            output('block: %s doesnot exist in dataNode: %s' %(blockname, self))


    def receive(msg=('kill')):
        """
        Handles terminate message.
        Sends terimante message to heartbeat process. Then exits.
        """
        output('handler: received kill message. hbp=', self.heartbeatProcess)
        # Send kill message to heartbeat process!
        send(('kill_hbprocess'), to=self.heartbeatProcess)
        exit(0)


