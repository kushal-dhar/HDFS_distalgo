'''
from Block import BlockInfo
from DataNode import DataNode
'''

"""
Client process in HDFS cluster.
Users interact with HDFS by sending messages to Client
"""


class Client(process):

    def setup(namenodes):
        self.msgId = 0

    def run():
        output('client running: ', self)
        await(received(('kill')))

    def getNewMessageId():
        messageId = self.msgId
        self.msgId += 1
        return messageId

    # add token as argument for the requst
    # notify user to not have 2 same requests with same token
    def receive(msg=('createFile', filename), from_=user):
        output('client: received createFile: ', filename)
        messageId = getNewMessageId()
        output('client: sending createFile msg with id ', messageId)
        send(('createFile', self, filename, messageId), to=namenodes)

        await(some(received(('createFile', _filename, _messageId, _))))
        result = setof(r, received(('createFile', _filename, _messageId, r)))
        output('client: result= ', result, ' for filename= ', filename)
        for r in result:
            pass
        output('client: received result from namenode ', r, ' for filename ', filename)
        send(('createFile', filename, r), to=user)

    def receive(msg=('listFiles'), from_=user):
        output('client: received listFiles')
        messageId = getNewMessageId()
        output('sending listFiles request to namenode with msgId: ', messageId)
        send(('listFiles', self, messageId), to=namenodes)

        await(some(received(('listFiles', _messageId, _))))
        #output('got reply!!')
        result = setof(r, received(('listFiles', _messageId, r)))
        output('result: ', result)
        for r in result:
            pass
        output('received listFiles result from namenode ', r)
        send(('listFiles', r), to=user)

    def receive(msg=('openFile', mode, token, filename), from_=user):
        output('client: received openFile: filename=', filename, ', token=', token)
        messageId = getNewMessageId()
        output('sending open request to namenode for: ', filename, ' with msgId: ', messageId)
        send(('openFile', mode, self, filename, messageId), to=namenodes)
        await(some(received(('openFile', _filename, _mode, _messageId ,_))))
        # Reply back to client with the result
        result = setof(r, received(('openFile', _filename, _mode, _messageId ,r)))
        for r in result:
            pass
        output('client: received result of open from namenode for file: ', filename, ' result= ', r)
        send(('openFile', mode, token, filename, r), to=user)
