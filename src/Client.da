'''
from Block import BlockInfo
from DataNode import DataNode
'''

import Config
import time


"""
Client HeartBeat process to notify the NameNode
that the client is awake
"""
class ClientNodeHeartbeat(process):
    def setup(clientnode, namenode, interval=Config.CLIENT_HEARTBEAT_INTERVAL):
        pass

    def run():
        output('started heartbeat process for client: ', clientnode)
        while True:
            # output('sending heartbeat', self)
            send(('heartbeat_client', clientnode), to=namenode)
            time.sleep(interval)


    def receive(msg=('kill')):
        output('received kill')
        exit(0)


"""
Client process to accept multiple read and write requests
"""
class UserReq_Handle(process):

    def setup(filename,mode,messageId,token,user):
        self.filename = filename
        self.mode = mode
        self.messageId = messageId
        self.token = token
        self.user = user


    def run():
        output('awaiting to aquire lease ')
        await(some(received(('openFile', _filename, _mode, _messageId, _))))
        result = setof(r, received(('openFile', _filename, _mode, _messageId, r)))
        output("result: ", result)
        for r in result:
            pass
        output('client: received result of open from namenode for file: ', filename, ' result= ', r)
        send(('openFile', mode, token, filename, r), to=user)
        exit(0)


"""
Client process in HDFS cluster.
Users interact with HDFS by sending messages to Client
"""
import Utils

class Client(process):

    def setup(namenodes):
        self.msgId = 0
        self.namenodes = namenodes


    def run():
        output('client running: ', self)

        heartbeatProcess = new(ClientNodeHeartbeat, num=1, at=Config.CLIENT_LOCATION)
        for hbp in heartbeatProcess:
            setup(hbp, args=(self, namenodes))
        start(heartbeatProcess)
        await(received(('kill')))


    def getNewMessageId():
        messageId = self.msgId
        self.msgId += 1
        return messageId


    # add token as argument for the requst
    # notify user to not have 2 same requests with same token
    def receive(msg=('createFile', filename), from_=user):
        output('client: received createFile: ', filename)
        messageId = getNewMessageId()
        output('client: sending createFile msg with id ', messageId)
        send(('createFile', self, filename, messageId), to=namenodes)

        await(some(received(('createFile', _filename, _messageId, _))))
        result = setof(r, received(('createFile', _filename, _messageId, r)))
        output('client: result= ', result, ' for filename= ', filename)
        for r in result:
            pass
        output('client: received result from namenode ', r, ' for filename ', filename)
        send(('createFile', filename, r), to=user)


    def receive(msg=('listFiles'), from_=user):
        output('client: received listFiles')
        messageId = getNewMessageId()
        output('sending listFiles request to namenode with msgId: ', messageId)
        send(('listFiles', self, messageId), to=namenodes)

        await(some(received(('listFiles', _messageId, _))))
        #output('got reply!!')
        result = setof(r, received(('listFiles', _messageId, r)))
        output('result: ', result)
        for r in result:
            pass
        output('received listFiles result from namenode ', r)
        send(('listFiles', r), to=user)


    def receive(msg=('openFile', mode, token, filename), from_=user):
        output('client: received openFile: filename=', filename, ', token=', token)
        messageId = getNewMessageId()
        output('sending open request to namenode for: ', filename, ' with msgId: ', messageId)
        send(('openFile', mode, self, filename, messageId), to=namenodes)
        reqs = new(UserReq_Handle, num=1)
        for req in reqs:
            setup(req, args=(filename, mode, messageId, token, user))
        start(reqs)
        #await(some(received(('openFile', _filename, _mode, _messageId ,_))))
        # Reply back to client with the result
        #result = setof(r, received(('openFile', _filename, _mode, _messageId ,r)))
        #r = Utils.getOneFromSet(result)
        #output('client: received result of open from namenode for file: ', filename, ' result= ', r)
        send(('openFile', mode, token, filename, True), to=user)


    def receive(msg=('closeFile', mode, token, filename), from_=user):
        output('client: received closeFile: filename=', filename, ', token=', token)
        messageId = getNewMessageId()
        output('sending close request to namenode for: ', filename, ' with msgId: ', messageId)
        send(('closeFile', mode, self, filename, messageId), to=namenodes)
        await(some(received(('closeFile', _filename, _mode, _messageId, True))))
        result = setof(r, received(('closeFile', _filename, _mode, _messageId, r)))
        for r in result:
            pass
        output('client: received result of close from namenode for file: ', filename, ' result= ', r)
        send(('closeFile', mode, token, filename, r), to=user)


    def receive(msg=('readFile', token, filename, blockNumber, nbytes), from_=user):
        output('client: received readFile: filename={0}, blockNumber={1}, nbytes={2}, token={3}'.format(filename, blockNumber, nbytes, token))
        messageId = getNewMessageId()
        send(('readFile_c2n', self, filename, blockNumber, nbytes, messageId), to=namenodes)
        await(some(received(('readFile_n2c', _filename, _blockNumber, _messageId, _))))

        result = setof(r, received(('readFile_n2c', _filename, _blockNumber, _messageId, r)))
        # r is the list of (datanodes, location of block) which store the block client wants to read
        r = Utils.getOneFromSet(result)

        output('client: received list of datanodes for filename={0}, blockNumber={1}: {2}'.format(filename, blockNumber,r))
        # Client contacts one of datanode for data
        # TODO - handle case when r in None
        datanodeToContact = r[0][0]
        filenameAtDatanode = r[0][1]
        messageId = getNewMessageId()
        send(('readFile_c2d', self, filenameAtDatanode, nbytes, messageId), to=datanodeToContact)

        await(some(received(('readFile_d2c', _filenameAtDatanode, _nbytes, _messageId, _))))
        result = setof(r, received(('readFile_d2c', _filenameAtDatanode, _nbytes, _messageId, r) ))
        read_data = Utils.getOneFromSet(result)
        output('client: received data from datanode for filename={0}, blockNumber={1}: {2}'.format(filename, blockNumber,
                                                                                                  read_data))
        send(('readFile', token, filename, blockNumber, nbytes, read_data), to=user)
