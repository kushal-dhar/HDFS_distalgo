"""
The client interface which acts as a mediator between namenode and users for processing requests.
It supports create, list, open, read, write, close, delete file operations
"""
import Config
import time
import Utils
import sys
import random


"""
Client HeartBeat process to notify the NameNode
that the client is awake and running
"""
class ClientNodeHeartbeat(process):
    def setup(clientnode, namenode, interval=Config.CLIENT_HEARTBEAT_INTERVAL):
        pass

    def run():
        output('started heartbeat process for client: ', clientnode)
        while True:
            # output('sending heartbeat', self)
            send(('heartbeat_client', clientnode), to=namenode)
            #time.sleep(interval)
            # Use await instead of sleep because if we use sleep,
            # the kill message is never processed and the process never ends
            # Took us time to actually debug this!
            if await(False):
                pass
            elif timeout(interval):
                pass


    def receive(msg=('kill')):
        """
        On receiving kill message, terminate the heartbeat process
        :return: None
        """
        output('received kill')
        exit(0)


"""
Client process in HDFS cluster.
Users interact with HDFS by sending messages to Client
"""


class Client(process):
    """
    Implementation of section II.C of paper
    User applications access the file system using the HDFS
    client, a code library that exports the HDFS file system interface.

    The user application generally
    does not need to know that file system metadata and storage are
    on different servers, or that blocks have multiple replicas.



    """

    def setup(namenodes):
        """
        setup requires pid of namenode. Client interacts with namenode for all queries
        """
        # msgId is used with all messages sent to namenode to differentiate between different user requests
        # For example, a user can send 2 request for creating the same file. msgId differentiates between these 2 requests
        self.msgId = 0
        # Namenode with which the client interacts
        self.namenodes = namenodes
        # HearbeatProcess object to keep track of process responsible for sending heartbeat
        self.heartbeatProcess = None


    def run():
        output('client running: ', self)
        # Start heartbeat process for this client
        heartbeatProcess = new(ClientNodeHeartbeat, num=1, at=Config.CLIENT_LOCATION)
        for hbp in heartbeatProcess:
            setup(hbp, args=(self, namenodes))
        start(heartbeatProcess)

        await(False)
        # Wait for terminate message
        #await(received(('kill')))


    def getNewMessageId():
        """
        Unique messageId generator
        """
        messageId = self.msgId
        self.msgId += 1
        return messageId


    def receive(msg=('kill'), from_=user):
        """
        terminate message handler.
        sends terimnate message to heartbeat process, then calls exit on itself
        :param from_:
        :return:
        """
        for hbp in heartbeatProcess:
            send(('kill'), to=hbp)
        exit(0)

    def receive(msg=('createFile', token, filename), from_=user):
        """
        createFile message handler:
        sends create request to namenode, then waits for response from namenode
        after receiving reply from namenode, returns the result back to user
        """
        output('client: received createFile file={0} from user={1}'.format(filename, user))
        messageId = getNewMessageId()
        output('client: sending createFile msg with id={0} to namenode'.format(messageId))
        send(('createFile', self, filename, messageId), to=namenodes)

        await(some(received(('createFile', _filename, _messageId, _))))
        result = setof(r, received(('createFile', _filename, _messageId, r)))
        output('client: createFile: result={0} for filename={1}'.format(result, filename))
        r = Utils.getOneFromSet(result)
        output('client: received result from namenode ', r, ' for filename ', filename)
        send(('createFile', token, filename, r), to=user)


    def receive(msg=('listFiles', token), from_=user):
        """
        Handles request to list files in our filesystem.
        Requests namenode for list of files, then waits for response from namenode
        after receiving reply from namenode, returns the result back to user.
        The result is files in a tuple
        """
        output('client: received listFiles from user:', user)
        messageId = getNewMessageId()
        output('sending listFiles request to namenode with msgId: ', messageId)
        send(('listFiles', self, messageId), to=namenodes)

        await(some(received(('listFiles', _messageId, _))))
        #output('got reply!!')
        result = setof(r, received(('listFiles', _messageId, r)))
        output('result: ', result)
        r = Utils.getOneFromSet(result)
        output('received listFiles result from namenode ', r)
        send(('listFiles', token, r), to=user)


    def receive(msg=('openFile', mode, token, filename), from_=user):
        """
        Handles request to open a file is specified mode.
        Sends the request to namenode, then waits for reply.
        In case of write, the wait depends on size of request queue for the file.
        The reply is True if the open operation is successful and the client is granted the lease, False otherwise
        """
        output('client: received openFile: filename=', filename, ', token=', token)
        messageId = getNewMessageId()
        output('sending open request to namenode for: ', filename, ' with msgId: ', messageId)
        send(('openFile', mode, self, filename, messageId), to=namenodes)
        # reqs = new(UserReq_Handle, num=1)
        # for req in reqs:
        #     setup(req, args=(filename, mode, messageId, token, user))
        # start(reqs)
        await(some(received(('openFile', _filename, _mode, _messageId, _))))
        #Reply back to client with the result
        result = setof(r, received(('openFile', _filename, _mode, _messageId ,r)))
        r = Utils.getOneFromSet(result)
        output('client: received result of open from namenode for file: ', filename, ' result= ', r)
        send(('openFile', mode, token, filename, r), to=user)


    def receive(msg=('closeFile', mode, token, filename), from_=user):
        """
        Handles request to close the opened file
        Notifies namenode revoke the client's lease on the file
        """
        output('client: received closeFile: filename=', filename, ', token=', token)
        messageId = getNewMessageId()
        output('sending close request to namenode for: ', filename, ' with msgId: ', messageId)
        send(('closeFile', mode, self, filename, messageId), to=namenodes)
        await(some(received(('closeFile', _filename, _mode, _messageId, True))))
        result = setof(r, received(('closeFile', _filename, _mode, _messageId, r)))
        r = Utils.getOneFromSet(result)
        output('client: received result of close from namenode for file: ', filename, ' result= ', r)
        send(('closeFile', mode, token, filename, r), to=user)


    def receive(msg=('readFile', token, filename, mblockNumber, nbytes), from_=user):
        """
        Handles readFile request.
        When an application reads a file, the HDFS client first asks
        the  NameNode  for  the  list  of  DataNodes  that  host  replicas  of
        the blocks of the file. It then contacts a DataNode directly and
        requests the transfer of the desired block

        From section II.A
        An HDFS client wanting to
        read a file first contacts the NameNode for the locations of data
        blocks comprising the file and then reads block contents from
        the DataNode closest to the client

        From section II.C
        When an application reads a file, the HDFS client first asks
        the NameNode for the list of DataNodes that host replicas of
        the blocks of the file. It then contacts a DataNode directly and
        requests the transfer of the desired block

        From section III.A
        An application adds data to HDFS by creating a new file
        and writing the data to it. After the file is closed, the bytes written
        cannot be altered or removed except that new data can be
        added to the file by reopening the file for append. HDFS implements
        a single-writer, multiple-reader model

        """
        output('client: received readFile: filename={0}, blockNumber={1}, nbytes={2}, token={3}'.format(filename, mblockNumber, nbytes, token))

        bytes_read = 0
        blockNumber = 0
        data = b''
        messageId = getNewMessageId()
        send(('numBlocksInFile', filename, messageId), to=namenodes)
        await(some(received(('numBlocksInFile', _filename, _messageId, _))))
        result = setof(r, received( ('numBlocksInFile', _filename, _messageId, r) ))
        total_blocks = Utils.getOneFromSet(result)
        output("client: number of blocks in file={0} = {1}".format(filename, total_blocks))

        while bytes_read < nbytes and blockNumber < total_blocks:
            messageId = getNewMessageId()
            send(('readFile_c2n', self, filename, blockNumber, nbytes, messageId), to=namenodes)
            await(some(received(('readFile_n2c', _filename, _blockNumber, _messageId, _))))
            result = setof(r, received(('readFile_n2c', _filename, _blockNumber, _messageId, r)))
            # r is the list of (datanodes, location of block) which store the block client wants to read
            r = Utils.getOneFromSet(result)

            output('client: received list of datanodes for filename={0}, blockNumber={1}: {2}'.format(filename, blockNumber,
                                                                                                      r))
            # Client contacts one of datanode for data
            filenameAtDatanode, datanodesToContact = r
            if len(datanodesToContact) == 0:
                output('client: all datanodes hosting block={0} of file={1} are dead'.format(blockNumber, filename))
                data = (False, b'')
                send(('readFile', token, filename, mblockNumber, nbytes, data), to=user)
                return
            # Choose one datanode at random to read
            # According to paper, client contacts the datanode which is closest,
            # For now, contact any random datanode
            datanodeToContact = random.sample(datanodesToContact, 1)[0]
            messageId = getNewMessageId()
            # readFile_c2d specifies that this message is from client to datanode
            send(('readFile_c2d', self, filenameAtDatanode, nbytes, messageId), to=datanodeToContact)
            # readFile_d2c specifies that this message is from datanode to namenode
            await(some(received(('readFile_d2c', _filenameAtDatanode, _nbytes, _messageId, _))))
            result = setof(r, received(('readFile_d2c', _filenameAtDatanode, _nbytes, _messageId, r) ))
            read_data = Utils.getOneFromSet(result)
            data += read_data
            bytes_read += len(read_data)
            blockNumber += 1
            output('client: received data from datanode for filename={0}, blockNumber={1}: {2}'.format(filename, blockNumber,
                                                                                                      read_data))
        data = data[:nbytes]
        output("client: read all data: ", data)
        return_data = (True, data)
        output("client: sending= ", ('readFile', token, filename, mblockNumber, nbytes, return_data))
        send(('readFile', token, filename, mblockNumber, nbytes, return_data), to=user)


    def receive(msg=('appendFile', token, filename, data), from_=user):
        """
        When a client writes, it  first  asks  the  NameNode  to  choose  DataNodes  to  host
        replicas of the first block of the file. The client organizes a pipeline
        from  node -to-node  and  sends  the  data.  When  the  first  block  is
        filled,  the  client  requests  new DataNodes  to  be  chosen  to  host
        replicas of the next block.

        From section II.A
        When writing data, the client
        requests the NameNode to nominate a suite of three
        DataNodes to host the block replicas. The client then writes
        data to the DataNodes in a pipeline fashion

        From section II.C
        When a client writes,
        it first asks the NameNode to choose DataNodes to host replicas
        of the first block of the file. The client organizes a pipeline
        from node-to-node and sends the data. When the first block is
        filled, the client requests new DataNodes to be chosen to host
        replicas of the next block. A new pipeline is organized, and the
        client sends the further bytes of the file. Each choice of
        DataNodes is likely to be different.

        """
        output('client: received appendFile: filename={0}, token={1}, data={2}'.format(filename, token, data))
        dataWriteIndex = 0
        # The input data is divided into blocks
        # Each block is written independently of the other
        # Blocks are written sequentially
        while dataWriteIndex < len(data):
            messageId = getNewMessageId()
            # Ask namenode to nominate set of datanodes to store data
            # Namenode also tells how much data should be written in each block
            send(('appendFile_c2n', self, filename, messageId), to=namenodes)
            await(some(received(('appendFile_n2c', _filename, _messageId, _,))))
            result = setof(r, received(('appendFile_n2c', _filename, _messageId, r)))
            datanodes_to_write, blockName, blockSize, blockNumber = Utils.getOneFromSet(result)
            output("client: received nominated datanodes for filename={0}: {1}, blockName={2}, nbytes={3}".format(filename, datanodes_to_write, blockName, blockSize))

            # If namenode nominates no datanode, send False to user as the write Failed
            if len(datanodes_to_write) == 0:
                output('client: namenode nominated no datanode to append to file: ', filename)
                send(('appendFile', token, filename, False), to=user)
                return

            messageIdList = []
            messageIdDict = dict()
            for d in datanodes_to_write:
                messageIdList.append(getNewMessageId())
                messageIdDict[d] = messageIdList[-1]

            messageIdTuple = tuple(messageIdList)
            dataWriteEndIndex = min(dataWriteIndex + blockSize, len(data))
            dataPacket = data[dataWriteIndex:dataWriteEndIndex]
            dataWriteIndex = dataWriteEndIndex
            # Write the data to datanodes in pipeline fashion
            send(('appendFile_c2d', filename, blockName, blockNumber, dataPacket, datanodes_to_write, messageIdTuple, 0, self), to=datanodes_to_write[0])
            # await for all datanodes to finish. Then notify user
            for d in datanodes_to_write:
                await( received(('appendFile_d2c', messageIdDict[d])))
            #await(each d in datanodes_to_write, has= received(('appendFile_d2c', messageIdDict[d])))
            output("client: append packet={0} complete".format(dataPacket))
        output('appendFile complete!!')
        send(('appendFile', token, filename, True), to=user)



    def receive(msg=('deleteFile', token, filename), from_=user):
        """
        Handles requests to delete a file, Returns true if successful and false if some other user is accessing the file
        """
        output('client: received deleteFile: filename={0}'.format(filename))
        messageId = getNewMessageId()
        send(('deleteFile', self, filename, messageId), to=namenodes)
        await(some(received(('deleteFile', _filename, _messageId, _))))
        result = setof(r, received(('deleteFile', _filename, _messageId, r)))
        r = Utils.getOneFromSet(result)
        output("client: received result of deleteFile from namenode for file: ", filename, 'result= ', r)
        send(('deleteFile', token, filename), to=user)
